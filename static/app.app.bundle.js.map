{"version":3,"sources":["webpack:///./src/App.jsx","webpack:///./src/IssueAdd.jsx","webpack:///./src/IssueFilter.jsx","webpack:///./src/IssueList.jsx"],"names":["contentNode","document","getElementById","ReactDOM","render","module","IssueAdd","handleSubmit","bind","e","preventDefault","form","forms","issueAdd","props","createIssue","owner","value","title","status","created","Date","focus","React","Component","IssueFilter","IssueRow","issue","_id","toDateString","effort","completionDate","IssueTable","issueRows","issues","map","IssueList","state","loadData","console","log","fetch","then","response","ok","json","data","_metadata","total_count","records","forEach","setState","error","alert","message","catch","err","newIssue","method","headers","body","JSON","stringify","updatedIssue","newIssues","concat"],"mappings":"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","file":"app.app.bundle.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IssueList from './IssueList';\n\nconst contentNode = document.getElementById('contents');\n\n// class IssueFilter extends React.Component {\n//     render() {\n//         return (\n//             <div>This is a placeholder for the Issue Filter.</div>\n//         )\n//     }\n// }\n\n// class IssueRow extends React.Component {\n//     render() {\n//\n//         const issue = this.props.issue;\n//\n//         return (\n//             <tr>\n//                 <td>{issue.id}</td>\n//                 <td>{issue.status}</td>\n//                 <td>{issue.owner}</td>\n//                 <td>{issue.created.toDateString()}</td>\n//                 <td>{issue.effort}</td>\n//                 <td>{issue.completionDate ? issue.completionDate.toDateString() : ''}</td>\n//                 <td>{issue.title}</td>\n//             </tr>\n//         );\n//     }\n// }\n//\n// class IssueTable extends React.Component {\n//     render() {\n//\n//         const issueRows = this.props.issues.map(issue => <IssueRow key={issue.id} issue={issue} />);\n//\n//         return (\n//             <table className=\"bordered-table\">\n//                 <thead>\n//                     <tr>\n//                         <th>Id</th>\n//                         <th>Status</th>\n//                         <th>Owner</th>\n//                         <th>Created</th>\n//                         <th>Effort</th>\n//                         <th>Completion Date</th>\n//                         <th>Title</th>\n//                     </tr>\n//                 </thead>\n//                 <tbody>{issueRows}</tbody>\n//             </table>\n//         );\n//     }\n// }\n\n// const issues = [\n//     {\n//         id: 1, status: 'Open', owner: 'Ravan',\n//         created: new Date('2016-08-15'), effort: 5, completionDate: undefined,\n//         title: 'Error in console when clicking Add',\n//     },\n//     {\n//         id: 2, status: 'Assigned', owner: 'Eddie',\n//         created: new Date('2016-08-16'), effort: 14, completionDate: new Date('2016-08-30'),\n//         title: 'Missing bottom border on panel',\n//     },\n// ];\n//\n// class IssueAdd extends React.Component {\n//     constructor () {\n//         super();\n//         this.handleSubmit = this.handleSubmit.bind(this);\n//     }\n//\n//     handleSubmit(e) {\n//         e.preventDefault();\n//         let form = document.forms.issueAdd;\n//         this.props.createIssue({\n//             owner: form.owner.value,\n//             title: form.title.value,\n//             status: 'New',\n//             created: new Date(),\n//         });\n//         form.owner.value = '';\n//         form.owner.focus();\n//         form.title.value = '';\n//     }\n//\n//     render() {\n//         return (\n//             <div>\n//                 <form name=\"issueAdd\" onSubmit={this.handleSubmit}>\n//                     <input type=\"text\" name=\"owner\" placeholder=\"Owner\" />\n//                     <input type=\"text\" name=\"title\" placeholder=\"Title\" />\n//                     <button>Add</button>\n//                 </form>\n//             </div>\n//         );\n//     }\n// }\n\n// class IssueList extends React.Component {\n//     constructor () {\n//         super();\n//         this.state = { issues: [] };\n//         this.createIssue = this.createIssue.bind(this);\n//     }\n//\n//     componentDidMount() {\n//         this.loadData();\n//     }\n//\n//     loadData() {\n//         // setTimeout(() => {\n//         //     this.setState({ issues: issues});\n//         // }, 500);\n//\n//       fetch('/api/issues').then(response =>\n//         response.json()\n//       ).then(data => {\n//         console.log('total count of records:', data._metadata.total_count);\n//         data.records.forEach(issue => {\n//           issue.created = new Date(issue.created);\n//           if (issue.completionDate)\n//             issue.completionDate = new Date(issue.completionDate);\n//         });\n//         this.setState({ issues: data.records });\n//       }).catch(err => {\n//         console.log(err);\n//       });\n//\n//     }\n//\n//     createIssue(newIssue) {\n//\n//       fetch('/api/issues', {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify(newIssue),\n//\n//       }).then(response => {\n//\n//         if (response.ok) {\n//           response.json().then(updatedIssue => {\n//             updatedIssue.created = new Date(updatedIssue.created);\n//             if (updatedIssue.completionDate)\n//               updatedIssue.completionDate = new Date(updatedIssue.completionDate);\n//             const newIssues = this.state.issues.concat(updatedIssue);\n//             this.setState({issues: newIssues});\n//             console.log('Isue is okay', newIssues);\n//           });\n//         } else {\n//           response.json().then(error => {\n//             console.log('Failed to add issue: ', error.message);\n//           });\n//         }\n//       }).catch(err => {\n//         console.log('Error in sending date to server: ', err.message);\n//       });\n//\n//       // const newIssues = this.state.issues.slice();\n//       // newIssue.id = this.state.issues.length + 1;\n//       // newIssues.push(newIssue);\n//       // this.setState({ issues: newIssues });\n//     }\n//\n//     // createIssue(newIssue) {\n//     //\n//     //   fetch('/api/issues', {\n//     //     method: 'POST',\n//     //     headers: { 'Content-Type': 'application/json' },\n//     //     body: JSON.stringify(newIssue),\n//     //\n//     //   }).then(response => {\n//     //\n//     //     if (response.ok) {\n//     //       response.json().then(updatedIssue => {\n//     //         updatedIssue.created = new Date(updatedIssue.created);\n//     //         if (updatedIssue.completionDate)\n//     //           updatedIssue.completionDate = new Date(updatedIssue.completionDate);\n//     //         const newIssues = this.state.issues.concat(updatedIssue);\n//     //         this.setState({ issues: newIssues });\n//     //       });\n//     //     } else {\n//     //       response.json().then(error => {\n//     //         alert(\"Failed to add issue: \" + error.message)\n//     //       });\n//     //     }\n//     //   }).catch(err => {\n//     //     alert(\"Error in sending data to server: \" + err.message);\n//     //   });\n//     // }\n//\n//     render() {\n//         return (\n//             <div>\n//                 <h1>Issue Tracker</h1>\n//                 <IssueFilter/>\n//                 <hr/>\n//                 <IssueTable issues={this.state.issues} />\n//                 <hr/>\n//                 <IssueAdd createIssue={this.createIssue}/>\n//              </div>\n//         );\n//     }\n// }\n\nReactDOM.render(<IssueList />, contentNode);\n\nif (module.hot) {\n  module.hot.accept();\n}\n","import React from 'react';\n\nexport default class IssueAdd extends React.Component {\n  constructor () {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    let form = document.forms.issueAdd;\n    this.props.createIssue({\n      owner: form.owner.value,\n      title: form.title.value,\n      status: 'New',\n      created: new Date(),\n    });\n    form.owner.value = '';\n    form.owner.focus();\n    form.title.value = '';\n  }\n\n  render() {\n    return (\n      <div>\n        <form name=\"issueAdd\" onSubmit={this.handleSubmit}>\n          <input type=\"text\" name=\"owner\" placeholder=\"Owner-test\" />\n          <input type=\"text\" name=\"title\" placeholder=\"Title\" />\n          <button>Add</button>\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default class IssueFilter extends React.Component {\n  render() {\n    return (\n      <div>This is a placeholder for the Issue Filter. NEW TEXT!</div>\n    )\n  }\n}","import React from 'react';\nimport 'whatwg-fetch';\nimport IssueAdd    from './IssueAdd';\nimport IssueFilter from './IssueFilter';\n\nclass IssueRow extends React.Component {\n  render() {\n\n    const issue = this.props.issue;\n\n    return (\n      <tr>\n        <td>{issue._id}</td>\n        <td>{issue.status}</td>\n        <td>{issue.owner}</td>\n        <td>{issue.created.toDateString()}</td>\n        <td>{issue.effort}</td>\n        <td>{issue.completionDate ? issue.completionDate.toDateString() : ''}</td>\n        <td>{issue.title}</td>\n      </tr>\n    );\n  }\n}\n\nclass IssueTable extends React.Component {\n  render() {\n\n    const issueRows = this.props.issues.map(issue => <IssueRow key={issue._id} issue={issue} />);\n\n    return (\n      <table className=\"bordered-table\">\n        <thead>\n        <tr>\n          <th>Id</th>\n          <th>Status-brother</th>\n          <th>Owner</th>\n          <th>Created</th>\n          <th>Effort</th>\n          <th>Completion Date</th>\n          <th>Title</th>\n        </tr>\n        </thead>\n        <tbody>{issueRows}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default class IssueList extends React.Component {\n  constructor () {\n    super();\n    this.state = { issues: [] };\n    this.createIssue = this.createIssue.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadData();\n    console.log('component did mount');\n  }\n\n  loadData() {\n    fetch('/api/issues').then(response => {\n      if (response.ok) {\n        response.json().then(data => {\n          console.log('Total count of records:', data._metadata.total_count);\n          data.records.forEach(issue => {\n            issue.created = new Date(issue.created);\n            if (issue.completionDate)\n              issue.completionDate = new Date(issue.completionDate);\n          });\n          this.setState({issues: data.records});\n        });\n      } else {\n        response.json().then(error => {\n          alert('Failed to fetch issues:' + error.message)\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  createIssue(newIssue) {\n\n    fetch('/api/issues', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newIssue),\n\n    }).then(response => {\n\n      if (response.ok) {\n        response.json().then(updatedIssue => {\n          updatedIssue.created = new Date(updatedIssue.created);\n          if (updatedIssue.completionDate)\n            updatedIssue.completionDate = new Date(updatedIssue.completionDate);\n          const newIssues = this.state.issues.concat(updatedIssue);\n          this.setState({issues: newIssues});\n          console.log('Issue is okay', newIssues);\n        });\n      } else {\n        response.json().then(error => {\n          console.log('Failed to add issue: ', error.message);\n        });\n      }\n    }).catch(err => {\n      console.log('Error in sending date to server: ', err.message);\n    });\n\n    // const newIssues = this.state.issues.slice();\n    // newIssue.id = this.state.issues.length + 1;\n    // newIssues.push(newIssue);\n    // this.setState({ issues: newIssues });\n  }\n\n  // createIssue(newIssue) {\n  //\n  //   fetch('/api/issues', {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(newIssue),\n  //\n  //   }).then(response => {\n  //\n  //     if (response.ok) {\n  //       response.json().then(updatedIssue => {\n  //         updatedIssue.created = new Date(updatedIssue.created);\n  //         if (updatedIssue.completionDate)\n  //           updatedIssue.completionDate = new Date(updatedIssue.completionDate);\n  //         const newIssues = this.state.issues.concat(updatedIssue);\n  //         this.setState({ issues: newIssues });\n  //       });\n  //     } else {\n  //       response.json().then(error => {\n  //         alert(\"Failed to add issue: \" + error.message)\n  //       });\n  //     }\n  //   }).catch(err => {\n  //     alert(\"Error in sending data to server: \" + err.message);\n  //   });\n  // }\n\n  render() {\n    console.log('should see app');\n    return (\n      <div>\n        <h1>Issue Tracker</h1>\n        <IssueFilter/>\n        <hr/>\n        <IssueTable issues={this.state.issues} />\n        <hr/>\n        <IssueAdd createIssue={this.createIssue}/>\n      </div>\n    );\n  }\n}"],"sourceRoot":""}